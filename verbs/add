# add "file1" "file2"  
# avg  "file1" "file2"  
# sub "file1" "file2"
# mult "file1" "file2"
# div  "file1" "file2"
# warp  "file1" "file2"
# lam   "file1" "file2"

USAGE="usage: \n 
 add  \"PWL1\" \"PWL2\"  ; add two PWLs\n
 avg  \"PWL1\" \"PWL2\"  ; generate average of two PWLs\n
 sub  \"PWL1\" \"PWL2\"  ; subtract PWL2 from PWL1\n
 mult \"PWL1\" \"PWL2\"	 ; multiply PWL1 and PWL2\n  
 div  \"PWL1\" \"PWL2\"	 ; divide PWL1 by PWL2\n
 warp \"PWL1\" \"PWL2\"	 ; warp PWL1 time axis by PWL2\n
 lam  \"PWL1\" \"PWL2\"	 ; create common time scale\n
 max  \"PWL2\" \"PWL2\"	 ; will require intermediate point interpolation\n
 min  \"PWL1\" \"PWL2\"  ; will require intermediate point interpolation\n"

# partially implemented 
#

export MODE=`basename $0`

if [ $# != 2 ] ; then
    echo -e $USAGE
    exit 1
fi

export FILE1=$1
export FILE2=$2

awk '
    BEGIN {

	file1=ENVIRON["FILE1"]
	file2=ENVIRON["FILE2"]
	mode=ENVIRON["MODE"]

	# get set up 
	if ((reta=getline<file1) == 0) error++; ta2=$1; va2=$2;
	if ((reta=getline<file1) == 0) error++; ta =$1; va =$2;
	if ((retb=getline<file2) == 0) error++; tb2=$1; vb2=$2;
	if ((retb=getline<file2) == 0) error++; tb =$1; vb =$2;

        tmax = ta2
	if (tb2 < tmax) tmax = tb2

	if (error) { print "not enough points!"; exit(1); }

	c = docode(tb2,tb,ta2,ta);

	while (reta != 0 && retb != 0) {
	    c = docode(tb2,tb,ta2,ta);
	    if (c == 0) {
		retb=getline<file2
		if (retb != 0) {
		    tb2=tb; tb=$1; 
		    vb2=vb; vb=$2;
		}
	    } else if (c == 24) {
		reta=getline<file1
		if (reta != 0) {
		    ta2=ta; ta=$1; 
		    va2=va; va=$2;
		}
	    } else if (c==1 || c == 2 || c == 7) {

		# 1  tb2    tb       |          out ta2/tb    read b
		# 2  tb2    |   tb   |          out ta2,tb,   read b
		# 7         tb2 tb   |          out tab2,tb,  read b

		emit( mode, ta2, va2, interp(ta2, tb2, vb2, tb, vb))
		emit( mode, tb,  interp(tb, ta2, va2, ta, va),  vb)
		retb=getline<file2
		if (retb != 0) {
		    tb2=tb; tb=$1; 
		    vb2=vb; vb=$2;
		}
	    } else if (c==12 || c == 13 ) {

		#12         | tb2 tb |          out tb2,tb,   read b
		#13         | tb2    tb         out tb2,tab   read ab *

		emit( mode, tb2, interp(tb2, ta2, va2, ta, va), vb2)
		emit( mode, tb,  interp(tb, ta2, va2, ta, va), vb)

		retb=getline<file2
		if (retb != 0) {
		    tb2=tb; tb=$1; 
		    vb2=vb; vb=$2;
		}
	    } else if (c==8 || c == 4 || c == 3) {

		# 8         tb2      tb         out tab2,tab, read ab *
		# 4  tb2    |        |  tb      out ta2,ta,   read a 
		# 3  tb2    |        tb         out ta2,ta,   read ab *

		emit( mode, ta2, va2, interp(ta2, tb2, vb2, tb, vb))
		emit( mode, ta,  va,  interp(ta, tb2, vb2, tb, vb))

		reta=getline<file1
		if (reta != 0) {
		    ta2=ta; ta=$1; 
		    va2=va; va=$2;
		}
	    } else if (c==9 || c == 14 || c == 19) {

		# 9         tb2      |   tb     out tab2,ta,  read a
		#14         | tb2    |   tb     out tb2,ta    read a
		#19         |        tb2 tb     out tb2/ta    read a

		emit( mode, tb2, interp(tb2, ta2, va2, ta, va), vb2)
		emit( mode, ta,  va, interp(ta, tb2, vb2, tb, vb))

		reta=getline<file1
		if (reta != 0) {
		    ta2=ta; ta=$1; 
		    va2=va; va=$2;
		}
	    } else {
	       print "bad case!";
	    }
	}
    }

    function interp(tt, x2, y2, x1, y1) {
        if (x2 > x1 || tt < x2 || tt > x1) {
	    print "interp args out of bounds, non-monotonic time signal?"
	}
        return (y1+(y2-y1)*(tt-x1)/(x2-x1));
    }


    function emit(mm, tt, xx, yy) {
	if (tt > tmax) {
	    if (mm == "lam") {		# laminate two PWLs
	       printf "%.16g %.16g %.16g\n", tt, xx, yy;	
	    } else if (mm == "add") {	# add two PWLs
		print tt, xx+yy;
	    } else if (mm == "avg") {	# average two PWLs
		print tt, (xx+yy)/2.0;
	    } else if (mm == "sub") {	# subtract PWL2 from PWL1
		print tt, (xx-yy);
	    } else if (mm == "max") {   # output maximum value 
		if ((xxold > yyold &&  xx < yy) || (xxold < yyold && xx > yy)) {

		   # find intersection * where x == y
                   # xxold      yy
                   #        *
		   # yyold      xx
		   # ttold  tc  tt
                   #
		   # y = yyold + (yy-yyold)*(t-ttold)/(tt-ttold)
		   # x = xxold + (xx-xxold)*(t-ttold)/(tt-ttold)
                   #
		   # yyold + (yy-yyold)*(t-ttold)/(tt-ttold) =  xxold + (xx-xxold)*(t-ttold)/(tt-ttold)
		   # yyold - xxold  =  ((xx-xxold)-(yy-yyold))*(t-ttold)/(tt-ttold)
                   #
		   # (yyold - xxold)/((xx-xxold)-(yy-yyold)) = (t-ttold)/(tt-ttold)
		   # (tt-ttold)*(yyold - xxold)/((xx-xxold)-(yy-yyold))+ttold = t

		   t = (tt-ttold)*(yyold - xxold)/((xx-xxold)-(yy-yyold))+ttold
		   print t, yyold + (yy-yyold)*(t-ttold)/(tt-ttold)
		}
		if (xx > yy) {
		   print tt, xx;	# FIXME: does not interpolate cross points
		} else {
		   print tt, yy;
		}
	    } else if (mm == "min") {   # output minimum value
		if ((xxold > yyold &&  xx < yy) || (xxold < yyold && xx > yy)) {
		   t = (tt-ttold)*(yyold - xxold)/((xx-xxold)-(yy-yyold))+ttold
		   print t, yyold + (yy-yyold)*(t-ttold)/(tt-ttold)
		}
		if (xx < yy) {
		   print tt, xx;	# FIXME: does not interpolate cross points
		} else {
		   print tt, yy;
		}
	    } else if (mm == "mult") {  # multiply PWL 1&2
		print tt, (xx*yy);
	    } else if (mm == "div") {	# divide PWL1 by PWL2
		if (yy*yy < 1e-12) {
		   if (yy < 0) {
		       yy = -1e-12
		   } else {
		       yy = 1e-12
		   }
		}
		print tt, (xx/yy);
	    } else if (mm == "warp") {      # time warp x with y
		print tt+yy, xx;
	    } else {
		print mm ": bad name for program"
		exit (1)
	    }
	    tmax = tt;
	    ttold = tt;
	    xxold = xx;
	    yyold = yy;
	}
    }


    function docode(ttb2,ttb,tta2,tta) {

	
        # classify relationship between segments:
	# each tb,tb2 point can lie in region 0,2,4 or
	# at times 1,3.  Multiply value of tb2*5 and
	# add to value of tb:
        #
        #          0     1   2    3   4
        #
        #               ta2      ta
	#                |        |       
        # 0    tb2  tb   |        |	     	----------   read b   
	# 1    tb2       tb       |             out ta2,     read b
	# 2    tb2       |   tb   |             out ta2/tb,  read b
	# 3    tb2       |        tb            out ta2/ta,  read b *
	# 4    tb2       |        |   tb        out ta2/ta,  read a 
	# 7              tb2 tb   |          	out tb2/tb,  read b
	# 8              tb2      tb            out ta2/ta,  read b *
	# 9              tb2      |   tb        out ta2/ta,  read a
	#12              | tb2 tb |             out tb2/tb,  read b
	#13              | tb2    tb          	out tb2/tb   read a *
	#14              | tb2    |   tb      	out tb2/ta   read a
	#19              |        tb2 tb      	out tb2      read a
	#24              |        |   tb2 tb   	----------   read a
	#                |        |
        #

	# now sort patterns into consistent blocks sharing same 
	# operation, making use of cases where there is more than
	# one correct operation:

	# -------------------------------------------------------
        # 0  tb2 tb |        |	     	----------    read b   
	# -------------------------------------------------------
	#24         |        |  tb2 tb  ----------    read a
	# -------------------------------------------------------

	# 1  tb2    tb       |          out ta2/tb    read b
	# 2  tb2    |   tb   |          out ta2,tb,   read b
	# 7         tb2 tb   |          out tab2,tb,  read b
	# -------------------------------------------------------

	#12         | tb2 tb |          out tb2,tb,   read b
	#13         | tb2    tb         out tb2,tab   read ab *
	# -------------------------------------------------------

	# 8         tb2      tb         out tab2,tab, read ab *
	# 4  tb2    |        |  tb      out ta2,ta,   read a 
	# 3  tb2    |        tb         out ta2,ta,   read ab *
	# -------------------------------------------------------

	# 9         tb2      |   tb     out tab2,ta,  read a
	#14         | tb2    |   tb     out tb2,ta    read a
	#19         |        tb2 tb     out tb2/ta    read a
	# -------------------------------------------------------

	# we end up generating redundant points, but
	# can suppress them by making sure output time grows
	# monotonically.


	code = 0
	if (ttb <= tta2) {
	    if (ttb == tta2) {
	       code += 1
	    } 
	} else if (ttb <= tta) {
	    if (ttb == tta) {
		code += 3
	    } else {
		code += 2
	    }
	} else if (ttb > tta) {
	    code += 4
	} 

	if (ttb2 <= tta2) {
	    if (ttb2 == tta2) {
	       code += 5
	    } 
	} else if (ttb2 <= tta) {
	    if (ttb2 == tta) {
		code += 15
	    } else {
		code += 10
	    }
	} else if (ttb2 > tta) {
	    code += 20
	} 
	#print "docode", tb2, tb, ta2, ta, code
	return(code);
    }

'
